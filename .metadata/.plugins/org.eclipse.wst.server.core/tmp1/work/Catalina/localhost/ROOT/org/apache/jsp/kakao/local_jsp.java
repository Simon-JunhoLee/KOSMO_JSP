/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.88
 * Generated at: 2024-04-30 00:44:33 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.kakao;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class local_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(3);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<div>\r\n");
      out.write("	<h1>지역검색</h1>\r\n");
      out.write("</div>\r\n");
      out.write("<div class=\"row mb-4\">\r\n");
      out.write("    <form class=\"col-6\" name=\"frm\" action=\"\">\r\n");
      out.write("        <div class=\"input-group\">\r\n");
      out.write("            <input class=\"form-control\" name=\"query\" type=\"text\" value=\"가산동\" placeholder=\"장소명\">\r\n");
      out.write("            <button class=\"btn btn-dark\">검색</button>\r\n");
      out.write("        </div>\r\n");
      out.write("    </form>\r\n");
      out.write("</div>\r\n");
      out.write("<div id=\"div_local\"></div>\r\n");
      out.write("<div class=\"text-center my-3\">\r\n");
      out.write("    <button class=\"btn btn-dark\" id=\"prev\">이전</button>\r\n");
      out.write("    <span class=\"mx-3\" id=\"page\">1</span>\r\n");
      out.write("    <button class=\"btn btn-dark\" id=\"next\">다음</button>\r\n");
      out.write("</div>\r\n");
      out.write("<div id=\"map\"></div>\r\n");
      out.write("<script id=\"temp_local\" type=\"X-handlebars-template\">\r\n");
      out.write("    <table class=\"table table-hover\">\r\n");
      out.write("        <tr class=\"table-dark\">\r\n");
      out.write("            <th>장소명</th>\r\n");
      out.write("            <th>전화번호</th>\r\n");
      out.write("            <th>주소</th>\r\n");
      out.write("            <th>위치</th>\r\n");
      out.write("        </tr>\r\n");
      out.write("        {{#each documents}}\r\n");
      out.write("            <tr>\r\n");
      out.write("                <td>{{place_name}}</td>\r\n");
      out.write("                <td>{{phone}}</td>\r\n");
      out.write("                <td>{{address_name}}</td>\r\n");
      out.write("                <td><button x=\"{{x}}\" y=\"{{y}}\" place_url=\"{{place_url}}\" place_name=\"{{place_name}}\" address_name=\"{{address_name}}\" class=\"btn btn-dark btn-sm location\">위치</button></td>\r\n");
      out.write("            </tr>\r\n");
      out.write("        {{/each}}\r\n");
      out.write("    </table>\r\n");
      out.write("</script>\r\n");
      out.write("<script>\r\n");
      out.write("    let query = $(frm.query).val();\r\n");
      out.write("    let page = 1;\r\n");
      out.write("    getData();\r\n");
      out.write("    // 위치 버튼을 클릭한 경우\r\n");
      out.write("    $('#div_local').on(\"click\", \".location\", function(){\r\n");
      out.write("        const x = $(this).attr(\"x\");\r\n");
      out.write("        const y = $(this).attr(\"y\");\r\n");
      out.write("        const place_url = $(this).attr(\"place_url\");\r\n");
      out.write("        const place_name = $(this).attr(\"place_name\");\r\n");
      out.write("        const address_name = $(this).attr(\"address_name\");\r\n");
      out.write("        // alert(x + \":\" + y);\r\n");
      out.write("        var container = document.getElementById('map'); //지도를 담을 영역의 DOM 레퍼런스\r\n");
      out.write("        var options = { //지도를 생성할 때 필요한 기본 옵션\r\n");
      out.write("            center: new kakao.maps.LatLng(y, x), //지도의 중심좌표.\r\n");
      out.write("            level: 3 //지도의 레벨(확대, 축소 정도)\r\n");
      out.write("        };\r\n");
      out.write("\r\n");
      out.write("        var map = new kakao.maps.Map(container, options); //지도 생성 및 객체 리턴\r\n");
      out.write("        \r\n");
      out.write("        // 지도에 지형정보를 표시하도록 지도타입을 추가합니다\r\n");
      out.write("        map.addOverlayMapTypeId(kakao.maps.MapTypeId.TERRAIN);\r\n");
      out.write("\r\n");
      out.write("        // 마커가 표시될 위치입니다 \r\n");
      out.write("        var markerPosition  = new kakao.maps.LatLng(y, x); \r\n");
      out.write("\r\n");
      out.write("        // 마커를 생성합니다\r\n");
      out.write("        var marker = new kakao.maps.Marker({\r\n");
      out.write("            position: markerPosition\r\n");
      out.write("        });\r\n");
      out.write("\r\n");
      out.write("        // 마커가 지도 위에 표시되도록 설정합니다\r\n");
      out.write("        marker.setMap(map);\r\n");
      out.write("\r\n");
      out.write("        var iwContent = '<div style=\"width:200px;padding:5px;\">'+ place_name + '<br><a href=\"'+place_url+'\" style=\"color:blue\" target=\"_blank\">'+ address_name +'</a></div>', // 인포윈도우에 표출될 내용으로 HTML 문자열이나 document element가 가능합니다\r\n");
      out.write("            iwPosition = new kakao.maps.LatLng(y, x); //인포윈도우 표시 위치입니다\r\n");
      out.write("\r\n");
      out.write("        // 인포윈도우를 생성합니다\r\n");
      out.write("        var infowindow = new kakao.maps.InfoWindow({\r\n");
      out.write("            position : iwPosition, \r\n");
      out.write("            content : iwContent \r\n");
      out.write("        });\r\n");
      out.write("        \r\n");
      out.write("        // 마커에 마우스오버 이벤트를 등록합니다\r\n");
      out.write("        kakao.maps.event.addListener(marker, 'mouseover', function() {\r\n");
      out.write("        // 마커에 마우스오버 이벤트가 발생하면 인포윈도우를 마커위에 표시합니다\r\n");
      out.write("            infowindow.open(map, marker);\r\n");
      out.write("        });\r\n");
      out.write("\r\n");
      out.write("        // 마커에 마우스아웃 이벤트를 등록합니다\r\n");
      out.write("        kakao.maps.event.addListener(marker, 'mouseout', function() {\r\n");
      out.write("            // 마커에 마우스아웃 이벤트가 발생하면 인포윈도우를 제거합니다\r\n");
      out.write("            infowindow.close();\r\n");
      out.write("        });\r\n");
      out.write("        // 마커에 클릭이벤트를 등록합니다\r\n");
      out.write("        kakao.maps.event.addListener(marker, 'click', function() {\r\n");
      out.write("            // 마커 위에 인포윈도우를 표시합니다\r\n");
      out.write("            infowindow.open(map, marker);  \r\n");
      out.write("        });\r\n");
      out.write("    });\r\n");
      out.write("\r\n");
      out.write("    $(\"#next\").on(\"click\", function(){\r\n");
      out.write("        page++;\r\n");
      out.write("        getData();\r\n");
      out.write("    });\r\n");
      out.write("\r\n");
      out.write("    $(\"#prev\").on(\"click\", function(){\r\n");
      out.write("        page--;\r\n");
      out.write("        getData();\r\n");
      out.write("    });\r\n");
      out.write("\r\n");
      out.write("    $(frm).on(\"submit\", function(e){\r\n");
      out.write("        e.preventDefault();\r\n");
      out.write("        query = $(frm.query).val();\r\n");
      out.write("        if(query==\"\"){\r\n");
      out.write("            alert(\"장소명을 입력하세요!\");\r\n");
      out.write("        }else {\r\n");
      out.write("            getData();\r\n");
      out.write("            page = 1;\r\n");
      out.write("        }\r\n");
      out.write("    });\r\n");
      out.write("\r\n");
      out.write("    function getData() {\r\n");
      out.write("        $.ajax({\r\n");
      out.write("            type:\"get\",\r\n");
      out.write("            url:\"https://dapi.kakao.com/v2/local/search/keyword.json\",\r\n");
      out.write("            dataType:\"json\",\r\n");
      out.write("            data:{query:query, size:5, page:page},\r\n");
      out.write("            headers:{\"Authorization\":\"KakaoAK 35c0aa5e699cabcb9592ef08fb07d91a\"},\r\n");
      out.write("            success:function(data){\r\n");
      out.write("                console.log(data);\r\n");
      out.write("                // alert(\"성공!\");\r\n");
      out.write("                const temp = Handlebars.compile($('#temp_local').html());\r\n");
      out.write("                $('#div_local').html(temp(data));\r\n");
      out.write("                const last = Math.ceil(data.meta.pageable_count/5);\r\n");
      out.write("                $('#page').html(page + '/' + last);\r\n");
      out.write("                if(page==1){\r\n");
      out.write("                    $('#prev').attr('hidden', true);\r\n");
      out.write("                }else {\r\n");
      out.write("                    $('#prev').attr('hidden', false);\r\n");
      out.write("                }\r\n");
      out.write("                if(data.meta.is_end){\r\n");
      out.write("                    $('#next').attr('hidden', true);\r\n");
      out.write("                }else {\r\n");
      out.write("                    $('#next').attr('hidden', false);\r\n");
      out.write("                }\r\n");
      out.write("            }\r\n");
      out.write("        })\r\n");
      out.write("    }\r\n");
      out.write("</script>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
